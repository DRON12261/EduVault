@page "/Groups/Group/{mode}/{id?}"
@model EduVault.Pages.Groups.GroupModel
@{
    ViewData["Title"] = ((Model.Mode == "create") ? "Создание" : "Редактирование") + " группы";
}

<div class="form-container">
    <form method="post" asp-antiforgery="true">
        @Html.AntiForgeryToken()

        <!-- Основные поля группы -->
        <div class="card mb-4">
            <div class="card-header">Основные параметры</div>
            <div class="card-body">
                <div class="create-group-form-group">
                    @if (Model.Mode == "edit")
                    {
                        <div class="form-group">
                            <label>ИД:</label>
                            <input asp-for="Input.Id" type="text" class="form-control" readonly>
                        </div>
                    }
                    <div class="form-group">
                        <label>Название группы:</label>
                        <input asp-for="Input.Name" type="text" class="form-control" required>
                    </div>
                </div>
            </div>
        </div>

        <!-- Секция участников группы -->
        <div class="card mb-4">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <span>Участники группы</span>
                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addMemberModal">
                        <i class="bi bi-plus"></i> Добавить участника
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div id="members-container">
                    <partial name="_MembersTablePartial" model="Model" />
                </div>
            </div>
        </div>

        <!-- Кнопки действий -->
        <div class="d-flex gap-2">
            <button type="submit" asp-page-handler="Save" class="btn btn-primary">
                @(Model.Mode == "create" ? "Создать" : "Сохранить")
            </button>
            <button type="button" class="btn btn-secondary" onclick="window.history.back()">Отмена</button>
        </div>
    </form>
</div>

<!-- Модальное окно добавления участника -->
<div class="modal fade" id="addMemberModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="AddMember" id="addMemberForm">
                <div class="modal-header">
                    <h5 class="modal-title">Добавить участника</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Пользователь</label>
                        <select class="form-select" name="userId" required>
                            <option value="">-- Выберите пользователя --</option>
                            @foreach (var user in Model.AvailableUsers)
                            {
                                <option value="@user.Id">@user.Name (@user.Login)</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-primary">Добавить</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .form-container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }

        .create-group-form-group .form-group {
            margin-bottom: 1.5rem;
        }

        .table th {
            white-space: nowrap;
            vertical-align: middle;
        }

        .member-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            margin-right: 10px;
        }
    </style>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Инициализация модального окна
        const addMemberModal = new bootstrap.Modal(document.getElementById('addMemberModal'));

        // Обработка отправки формы добавления участника
        document.getElementById('addMemberForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const form = e.target;
            const formData = new FormData(form);
            const submitButton = form.querySelector('button[type="submit"]');

            submitButton.disabled = true;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Добавление...';

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: new URLSearchParams(formData),
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                        'Content-Type': 'application/x-www-form-urlencoded',
                    }
                });

                if (response.ok) {
                    const html = await response.text();
                    document.getElementById('members-container').innerHTML = html;
                    addMemberModal.hide();
                    form.reset();
                }
            } catch (error) {
                console.error('Error:', error);
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = 'Добавить';
            }
        });

        // Удаление участника
        $(document).on('click', '.remove-member', async function() {
            const userId = $(this).data('user-id');

            if (!confirm('Вы уверены, что хотите удалить участника из группы?')) return;

            $(this).html('<span class="spinner-border spinner-border-sm"></span>');

            try {
                const response = await fetch(`?handler=RemoveMember&userId=${userId}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (response.ok) {
                    const html = await response.text();
                    $('#members-container').html(html);
                }
            } catch (error) {
                console.error('Ошибка:', error);
            }
        });
    </script>
}
