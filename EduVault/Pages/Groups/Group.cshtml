@page "/Groups/Group/{mode}/{id?}"
@model EduVault.Pages.Groups.GroupModel
@{
    ViewData["Title"] = ((Model.Mode == "create") ? "Создание" : "Редактирование") + " группы";
}

<div class="form-container">
    <form method="post" asp-antiforgery="true">
        @Html.AntiForgeryToken()

        <!-- Основные поля группы -->
        <div class="card mb-4">
            <div class="card-header">Основные параметры</div>
            <div class="card-body">
                <div class="create-group-form-group">
                    @if (Model.Mode == "edit")
                    {
                        <div class="form-group">
                            <label>ИД:</label>
                            <input asp-for="Input.Id" type="text" class="form-control" readonly>
                        </div>
                    }
                    <div class="form-group">
                        <label>Название группы:</label>
                        <input asp-for="Input.Name" type="text" class="form-control" required>
                    </div>
                </div>
            </div>
        </div>
        <!-- Кнопки действий -->
        <div class="d-flex gap-2">
            <button type="submit" asp-page-handler="Save" class="btn btn-primary">
                @(Model.Mode == "create" ? "Создать" : "Сохранить")
            </button>
            <button type="button" class="btn btn-secondary" onclick="location.href='@Url.Page("/Groups/Index")'">Отмена</button>
        </div>
    </form>
        <!-- Секция участников группы -->
    <div class="card mb-4">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <span>Участники группы</span>
                <a href="/Groups/Members/@Model.Id"
                   class="btn btn-sm btn-primary">
                    <i class="bi bi-people"></i> Управление участниками
                </a>
            </div>
        </div>
        <div class="card-body">
            @if (Model.GroupMembers.Any())
            {
                <ul>
                    @foreach (var member in Model.GroupMembers.OrderBy(m => m.Name))
                    {
                        <li>@member.Name (@member.Login)</li>
                    }
                </ul>
            }
            else
            {
                <p class="text-muted">Нет участников</p>
            }
        </div>
    </div>
</div>

<!-- Модальное окно добавления участника -->
<div class="modal fade" id="addMemberModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="AddMember" id="addMemberForm">
                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="Mode" />
                <div class="modal-header">
                    <h5 class="modal-title">Добавить участника</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Выберите пользователя</label>
                        <div id="users-dropdown-container">
                            <select class="form-select" name="userId" required>
                                <option value="">-- Выберите пользователя --</option>
                                @foreach (var user in Model.AvailableUsers)
                                {
                                    <option value="@user.Id">@user.Name (@user.Login)</option>
                                }
                            </select>
                        </div>
                        @if (!Model.AvailableUsers.Any())
                        {
                            <div class="alert alert-warning mt-2">
                                Нет доступных пользователей для добавления
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-primary" @(Model.AvailableUsers.Any() ? "" : "disabled")>
                        Добавить
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .form-container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }

        .create-group-form-group .form-group {
            margin-bottom: 1.5rem;
        }

        .table th {
            white-space: nowrap;
            vertical-align: middle;
        }

        .member-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            margin-right: 10px;
        }
    </style>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Функция для обновления списка доступных пользователей
        function updateAvailableUsers() {
            $.ajax({
                url: '?handler=AvailableUsers',
                type: 'GET',
                success: function(data) {
                    $('#users-dropdown-container').html(data);
                },
                error: function() {
                    console.error('Ошибка при обновлении списка пользователей');
                }
            });
        }

        $(document).ready(function() {
            // Обработка добавления участника
            $('#addMemberForm').on('submit', function(e) {
                e.preventDefault();
                const form = $(this);

                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function(data) {
                        $('#members-container').html(data);
                        updateAvailableUsers(); // Обновляем список после добавления
                        $('#addMemberModal').modal('hide');
                        form.trigger('reset');
                    },
                    error: function() {
                        alert('Ошибка при добавлении участника');
                    }
                });
            });

            // Обработка удаления участника
            $(document).on('click', '.remove-member', function() {
                const userId = $(this).data('user-id');
                if (confirm('Вы уверены, что хотите удалить этого пользователя из группы?')) {
                    $.ajax({
                        url: '?handler=RemoveMember',
                        type: 'POST',
                        data: {
                            userId: userId,
                            id: @Model.Id,
                            mode: '@Model.Mode'
                        },
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(data) {
                            $('#members-container').html(data);
                            updateAvailableUsers(); // Обновляем список после удаления
                        },
                        error: function() {
                            alert('Ошибка при удалении участника');
                        }
                    });
                }
            });
        });
    </script>
}

