@page "/FileTypes/FileType/{mode}/{id?}"
@model EduVault.Pages.FileTypes.FileTypeModel
@{
    ViewData["Title"] = ((Model.Mode == "create") ? "Создание" : "Редактирование") + " типа файла";
}

<div class="form-container">
    <form method="post" asp-antiforgery="true">
        @Html.AntiForgeryToken()

        <!-- Основные поля типа файла -->
        <div class="card mb-4">
            <div class="card-header">Основные параметры</div>
            <div class="card-body">
                <div class="create-filetype-form-group">
                    @if (Model.Mode == "edit")
                    {
                        <div class="form-group">
                            <label>ИД:</label>
                            <input asp-for="Input.Id" type="text" class="form-control" readonly>
                        </div>
                    }
                    <div class="form-group">
                        <label>Название типа файла:</label>
                        <input asp-for="Input.Name" type="text" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Шаблон имени файла:</label>
                        <input asp-for="Input.FileNameTemplate" type="text"
                               class="form-control"
                               placeholder="Пример: ВКР_{Автор}_{Тип}_{Год}">
                        <small class="form-text text-muted">
                            Используйте плейсхолдеры, соответствующие полям ниже
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Секция полей типа файла -->
        <div class="card-body" id="fields-container">
            <partial name="_FieldsTablePartial" model="Model" />
        </div>

        <!-- Кнопки действий -->
        <div class="d-flex gap-2">
            <button type="submit" asp-page-handler="Save" class="btn btn-primary">
                @(Model.Mode == "create" ? "Создать" : "Сохранить")
            </button>
            <button type="button" class="btn btn-secondary" onclick="window.history.back()">Отмена</button>
            <button type="button" 
                    class="btn btn-primary" 
                    data-bs-toggle="modal" 
                    data-bs-target="#addFieldModal">
                <i class="bi bi-plus-circle"></i> Добавить поле
            </button>
        </div>
    </form>
</div>

<!-- Модальное окно добавления нового поля -->
<div class="modal fade" id="addFieldModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="AddField" id="addFieldForm">
                <input type="hidden" name="Id" value="@Model.Id" />
                <input type="hidden" name="Mode" value="@Model.Mode" />
                <div class="modal-header">
                    <h5 class="modal-title">Добавить новое поле</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label asp-for="NewField.Name" class="form-label">Название поля</label>
                        <input asp-for="NewField.Name" class="form-control" required />
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form-check">
                                <input asp-for="NewField.IsRequired" class="form-check-input" />
                                <label asp-for="NewField.IsRequired" class="form-check-label">Обязательное поле</label>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-check">
                                <input asp-for="NewField.IsPrefilled" class="form-check-input" />
                                <label asp-for="NewField.IsPrefilled" class="form-check-label">Автозаполняемое</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-primary">Добавить</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .form-container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }

        .create-filetype-form-group .form-group {
            margin-bottom: 1.5rem;
        }

        .table th {
            white-space: nowrap;
            vertical-align: middle;
        }

        .modal-content {
            border-radius: 10px;
        }

        .form-control {
            border-radius: 5px;
        }

        .btn {
            border-radius: 5px;
            padding: 0.375rem 0.75rem;
        }

        .card {
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .card-header {
            font-weight: 600;
            background-color: #f8f9fa;
            border-bottom: 1px solid #eaeaea;
        }
    </style>
}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
@section Scripts {
    <script>

        // Инициализация модального окна
        const addFieldModal = new bootstrap.Modal(document.getElementById('addFieldModal'));
        
        // Обработка отправки формы
        document.getElementById('addFieldForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const form = e.target;
            const formData = new FormData(form);
            const submitButton = form.querySelector('button[type="submit"]');
            
            // Показываем индикатор загрузки
            submitButton.disabled = true;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Добавление...';
            
            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    const html = await response.text();
                    document.getElementById('fields-container').innerHTML = html;
                    addFieldModal.hide();
                    form.reset();
                }
            } catch (error) {
                console.error('Error:', error);
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = 'Добавить';
            }
        });

        // Удаление поля
        $(document).on('click', '.remove-field', async function() {
            const index = $(this).data('index');
            const $row = $(this).closest('tr');
    
            // Показываем индикатор загрузки
            $(this).html('<span class="spinner-border spinner-border-sm"></span>');

            try {
                const response = await fetch(`?handler=RemoveField&index=${index}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (response.ok) {
                    const html = await response.text();
                    $('#fields-container').html(html);
                } else {
                    console.error('Ошибка сервера:', response.status);
                }
            } catch (error) {
                console.error('Ошибка:', error);
                $row.show(); // Восстанавливаем строку при ошибке
            }
        });
    </script>
}
